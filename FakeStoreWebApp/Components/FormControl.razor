@using System.Reflection
@typeparam T

<div class="card rounded-4 shadow h-100">
    <div class="card-header rounded-top-4 text-bg-dark text-center">
        <h1 class="fw-normal">
            Formulario Dinámico
        </h1>
    </div>

    <div class="card-body p-3 p-lg-4 text-black d-flex flex-column h-100">
        <p class="fw-normal fs-5 mb-1 pb-2 text-body-secondary">
            Por favor ingrese los siguientes datos.
        </p>

        <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" class="flex-grow-1">
            @foreach (var property in GetTypeProperties())
            {
                <div class="form-outline mb-4">
                    <div class="input-group mb-3">
                        <span class="input-group-text">
                            <i class="bi bi-person-circle"></i> <!-- Puedes cambiar el icono según la propiedad -->
                        </span>
                        @* Utilizamos un componente InputText para manejar la entrada *@
                        <InputText class="form-control"
                                   Value="@GetPropertyValue(property.Name)?.ToString()"
                                   ValueChanged="@(value => SetPropertyValue(property.Name, value))"
                                   ValueExpression="@(() => GetPropertyValue(property.Name).ToString())"
                                   placeholder="@property.Name"
                                   type="@(GetInputType(property.PropertyType))" />
                    </div>
                </div>
            }

            <div class="pt-1 mb-4 container d-flex flex-column">
                <div class="d-flex justify-content-between mt-auto">
                    <div class="me-auto">
                        <button type="submit" class="btn btn-dark">Enviar</button>
                    </div>
                    <div class="ms-auto align-self-center">
                        <a href="https://syscafe.com/politica-privacidad/" class="small text-body-secondary text-decoration-none" rel="noreferrer noopener">Política de privacidad.</a>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public T? Model { get; set; }

    private IEnumerable<PropertyInfo> GetTypeProperties()
    {
        return typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);
    }

    private object GetPropertyValue(string propertyName)
    {
        var property = typeof(T).GetProperty(propertyName);
        return property?.GetValue(Model);
    }

    private void SetPropertyValue(string propertyName, object value)
    {
        var property = typeof(T).GetProperty(propertyName);
        property?.SetValue(Model, value);
    }

    private string GetInputType(Type propertyType)
    {
        if (propertyType == typeof(string))
            return "text";
        if (propertyType == typeof(int) || propertyType == typeof(decimal) || propertyType == typeof(double))
            return "number";
        if (propertyType == typeof(bool))
            return "checkbox";
        return "text";
    }

    private Task HandleValidSubmit()
    {
        // Implementa la lógica de envío aquí
        return Task.CompletedTask;
    }
}
